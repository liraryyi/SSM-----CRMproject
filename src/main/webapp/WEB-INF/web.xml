<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--
      spring创建容器对象时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定义springmvc读取的配置文件的位置-->
        <init-param>
            <!--springmvc的配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:conf/dispatcherServlet.xml</param-value>
        </init-param>

        <!--tomcat启动后，创建Servlet对象
            load-on-startup:表示tomcat启动后创建对象的顺序。它的值是整数，数值越小，
            tomcat创建对象的时间越早。大于等于0的整数。
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--
        使用框架的时候：url-pattern可以使用两种值
        1.使用扩展名方式，语法 *.xxxx，xxxx是自定义的扩展名。常用的方式 *.do，*.action，*.mvc等

        2.使用斜杠"/"

        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>


    <!--注册spring的监听器-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:conf/applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.liraryyi.crm.listener.SysInitListener</listener-class>
    </listener>

    <!--注册字符集过滤器-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--使用过滤器实现登陆控制-->
    <!--filter标签用于声明过滤器对象-->
    <filter>
        <!--过滤器名称-->
        <filter-name>LoginFilter</filter-name>
        <!--过滤器完整类名-->
        <filter-class>com.liraryyi.crm.filter.LoginFilter</filter-class>
        </filter>
        <!--filter-mapping用于创建过滤器的映射，指定Web应用中，哪些URL应用哪一个过滤器进行处理-->
        <filter-mapping>
        <filter-name>LoginFilter</filter-name>
        <!--url-pattern用于指定过滤器应用的URL-->
        <!--过滤的页面(自定义),这里对登录界面就不要过滤了-->
            <url-pattern>*.do</url-pattern>
            <url-pattern>*.jsp</url-pattern>
    </filter-mapping>
</web-app>