<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--spring配置文件 声明service，dao，工具类等对象
        bean：在这里用bean定义实例对象，(实际上是调用对象的无参构造方法)
        id：id是该实例的唯一标识，通过id在代码中使用该对象
        property:调用无参构造创建对象后，会对对象属性进行初始化(这里实际上是调用对象的setter方法)
                 name:对象中对应的属性名
                 value:赋给属性的值
    -->

    <!--声明属性配置文件的位置-->
    <context:property-placeholder location="classpath:conf/jdbc.properties"/>

    <!--声明数据源，连接数据库-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--SqlSessionFactoryBean创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:conf/mybatis.xml"/>
    </bean>

    <!--声明mybatis的扫描器，创建dao对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.liraryyi.crm.settings.dao"/>
    </bean>

    <!--声明组件扫描器：spring就会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，
                     如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，
                     则把这些类注册为bean
    -->
    <context:component-scan base-package="com.liraryyi.crm.settings.service"/>

    <!--事务配置：注解的配置，aspectj的配置-->
</beans>